# Part A

Problem: Using the Grammar given in K & R (pp.234-238), build a parser
for C using the bison parser-generator.
Input: A C program (argv[1] as earlier).
Output: On the screen, a sequence of productions being reduced. i.e.
Rightmost derivation in Reverse.

Notes:
(1) The printfs of Assignment-1, Part-A will be the tokens now. This
is the reason I had mentioned to have single names while printing.
    - You need to return <token_name> now in the flex action part.
    - Remove the printfs in flex program.

(2) Type the grammar for bison using the syntax learnt while working
with the expression-grammar.
    2.a. The italicized names are non-terminals.
    2.b. translation-unit is the Start symbol.
    2.c. Terminals are
        - characters directly shown (+, ++ etc.),
        - regular non-italic words (auto, register etc.),
        - integer-constant, character-constant, floating-constant,
identifier, string, enumeration-constant.
    You can have exponent-constant if desired, or merge it with
floating-constant.

(3) For the action part of each production, have a
    { printf("\t: <left_side> : <right_side>\n"); }

(4) Just mechanically typing the grammar is trivial. As mentioned,
understand all the preceding pages (pp.191-228). You can skip the
pre-processor part. *** The viva will be based on this understanding,
(along with bison understanding). Most importantly, it will be a good
preparation for the upcoming campus-interviews.

(5) While implementing, take care of the following:
    5.a. The productions having <opt> need to be duplicated, once with
that symbol, once without that. *** Some may be tricky!
    5.b. The productions having "one of" need to be appropriately handled.
    5.c. Remove the "typedef_name: identifier production", and make it
a Terminal (token).
        These 3 are mentioned in the beginning of pp.234.

(6) Take a printout of the 5 Grammar pages, and number all productions
from beginning (1, 2, ...). Number the productions for same
Non-Terminal on left as 1-a, 1-b etc. We will be referring to these
for illustration purposes.

# Part B

Problem: Construct a Symbol Table for all the identifiers appearing in
the input C-program.
Input: A C-program as earlier (argv[1])
Output:
    - print error message and exit on duplicate declarations
    - print error message and exit on usage without declarations
    - if no error, print the symbol table after the parse is complete.
The symbol table should contain these FIVE information for each
identifier: name, type, line number of declaration, size (1 for
non-arrays), initial value if any.

Explanation:
An identifier is used in 2 ways in a C-program:
- Declaration/definition:
    - int a;
    - char x, y, z;
    - float b = 10;
    - double w[10];
    - int c[ ] = {1, 2, 3};
    There are more ways, but we will handle only these.
- Usage in expressions

You need to *IDENTIFY* the grammar productions for both of these, and
write appropriate bison actions (in addition to the printfs you
already have in Assignment-2, Part-A). For instance,
(1) when you see an identifier as part of rule 23-a (or possibly one
of its parents), you need to add that to symbol table (after possibly
checking that it doesn't exist).
(2) when you see a type specifier (or, initializer, etc.) you need to
update the entry in the symbol table of the corresponding
identifier(s).
(3) instead of (1), (2) you can remember the information and add to
symbol table when the parsing reduces rule-4.
(4) when you encounter an identifier as part of an expression, e.g. in
rule 63-a, you need to check if it is defined or not in the symbol
table.

As you see, this is an open problem, and you can do the same thing in
many ways...

In summary, at a high-level, you need to do 3 tasks:
(a) define a symbol table in your program. Ideally, it would be an
array of struct. The struct will have at least FIVE members.
(b) write the symbol table functions (lookup, add, print, etc.)
(c) write appropriate logic in the action part of bison productions
making use of above functions.

