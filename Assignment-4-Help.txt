Generate the 80x86 assembly code from your intermediate code (Assignment-3).

Knowing how the most rudimentary constructs like loops, function calls and variable declaration are mapped into assembly language helps to understand C internals. Compilers for high level language like C/C++ have the ability to translate high level language into assembly language. Unlike C language, there are variations w.r.t the 80x86 assembly syntax. The GNU C and C++ compiler option of -S will generate an assembly code equivalent to that of the corresponding source program.  By default, GCC makes the assembler file name by replacing the suffix '.c' with '.s'. This generates .s file which can be successfully executed to give desired output of input program.

GCC Compilation Order
1. preprocessing (.i-file) - Macro substitution, comments are stripped off and Exapansion of the included files
2. compiling(.s-file) - Compiler takes .i file as input, compiles it and produces an intermediate compiled output
3. assembling(.o-file) - Assembler converts .s file with assembly instructions into .o object file with machine level instructions. Only the existing code is converted into machine language, the function calls like printf() are not resolved.
4. linking (.exe-file) - Linker takes the object files and links it with other object files to produce executable file

Please read here to know more about GCC Compilation Order
https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html
https://www.thegeekstuff.com/2011/10/c-program-to-an-executable/

Following are the 4 steps:

(0) Understand the 80x86 assembly (either in GAS syntax on NASM
syntax). Experiment, and also go through the wiki page. Basically, you
need only the following features:
    - Registers for regular operations (eax, ebx etc...)
    - Memory read/write (mov etc.)
    - Arithmetic. Here pay special attention to fixed registers for
Multiply and Divide.
    - Boolean AND, OR.
    - Array addressing
    - Compare and Jump

(1) Covert the TAC output to a Quadruple or Triple table.
    - Define a Intermediate Code Table, with 4 (or 3) columns.
    - Where ever you have fprintf currently, populate in the Table
also. Don't remove the fprintf.

(2) Call a function after yyparse (in main) called generate_code().
    - Have exactly this comment at the *END* of your Assignment-3 <file>.y
/* Assignment 4: Code Generation */
    - Define the generate_code function and all supporting functions
*AFTER* this comment. You may have to declare the prototype in the
first section of bison.
    - Let main take another parameter as command line argument
(argv[3]), which contains the output assembly file name. So your
command line will have:
a.exe <file>.c <file>.i <file>.s

*** Ask me if you don't understand this instruction. If any violation,
it will NOT be evaluated. ***

(3) The output <file>.s will contain the following FIVE being
generated in the generate_code() function:

    (3.1) Header of assembly file
        - (in NASM/Win-8 syntax): these 6 lines hardcoded in a single fprintf:
extern  _printf
SECTION .text
global _main
_main:
        push    ebp
        mov     ebp,esp

    (3.2) Scan your quadruple/triple table, and convert EACH TAC into
1+ assembly instructions.
        - Here your knowledge of (0) will help.
        - Most of this is mechanical. Only for TACs of the form t0 = a
< b, you need to do something more. But it is easy...
        - You need not worry about register re-use. You can do the
following 3 for each TAC:
             a. load from memory into register
             b. do operation using this register, and another memory
(or register)
             c. store result from register to memory.

    (3.3) Hardcode the result printing part using a single fprintf.
For this, you can assume that the C program contains the following 3
variables:
        - int "result" contains the result (e.g. sum of elements in an
array, 0 or 1 for searching an element in an array, etc.).
        - The array name is "a", with "size" elements. So print a[0]
to a[size-1].
        - You print these 3 things in order: result, size, a[0], a[1],
..., a[size-1]. All are of type int.

*** Most of you have done the printf part in the lab, so just hardcode
it in a single fprintf. ***

    (3.4) Footer of the assembly file:
        - (in NASM/Win-8 syntax): these 4 lines hardcoded in a single fprintf
mov esp, ebp
pop ebp
mov eax, 0
ret

    (3.5) The symbol table:
        - (in NASM/Win-8 syntax): first have these 2 lines hardcoded
using a single fprintf.
SECTION .data
printtext: dd "%d", 10, 0

*** Using only %d, because you just need to print ints in (3.3). The
10, 0 are for NEW_LINE and NULL_TERMINATION ***

        - Then have all variables from symbol table, according to
their type, initial value etc. For this you need to see the syntax of
variable declaration.


80x86 Assembler Options

Unlike C language, there are variations w.r.t the 80x86 assembly
syntax. Two options are discussed below.
PFA the sample files for both the formats. I am trying to integrate
the library function printf with the assembly code. Idea is that, in
addition to seeing the correctness of the assembly code generated
(using *your* compiler), we can infact run it, and check the output.
Notes:
    - It is "globl" and not "global" in gcc syntax.
    - It is "_printf" and not "printf"
    - There are 2 sections: .text and .data
    - You will be generating MOST of the contents of this file from
the Intermediate file, other than the header/footer/printfs.

Running the sample programs:
--------------------------------------------
(1) using gcc: called AT&T syntax. This internally uses GAS (Gnu-ASsembler).
    (a) The code is in cg_gcc.s
    (b) Run gcc -m32 cg_gcc.s
        - m32 is for 32-bit machines, as i noticed some easy features
like direct memory access are not permitted in 64 bit option (which is
the default option in 64-bit machines).
    (c) a.exe

(2) using NASM: called Intel syntax. (www.nasm.us)
    (a) Goto http://www.nasm.us/pub/nasm/releasebuilds/2.11/, and
download the ZIP file from the appropriate directory.
    (b) Unzip it.
        - From the point you unzip, you will get
"nasm/nasm-2.11/nasm.exe" as the executable.
    (c) Run nasm/nasm-2.11/nasm.exe -f elf cg_nasm.s
        - -f is the output file format.
        - For Linux, it may be same or may have to be changed
            - For a listing of options, see nasm/nasm-2.11/nasm.exe -hf
        - For Mac, it is -f macho32.
        - This will create cg_nasm.o
    (d) Run gcc cg_nasm.o
        - Can put the -m32 option if gcc complains.
    (e) a.exe

See http://en.wikipedia.org/wiki/X86_assembly_language, especially the
comparison between the 2 options. Also note the various registers
available.
Further comparison can be found at https://github.com/yasm/yasm/wiki/Gassyntax.

The opcodes remain the same (other than adding appropriate suffix when
using gcc): http://en.wikipedia.org/wiki/X86_instruction_listings

Platforms:
    - I have tested out in the Win-8 machines in the Lab. I guess most
of you have this configuration. It hangs at the end for the gcc option
after showing the result, but i guess it should not be an issue.
    - I haven't tried on Linux, but it should work.
    - Yet to get it working on Mac. Without printf call it is fine.
With printf both gcc and nasm are giving segmentation fault.

Do these activities in the lab:
(1) Pick one of these formats. You should be active to get any
problem/bug fixed by searching online.
(2) Understand the meaning of each line. If you think some line is
redundant, delete it and check.
(3) Develop a simple "print elements of an array" program in assembly. For
this, figure out
    - how arrays (only 1-d) are declared, and
    - how they are accessed.
(4) Develop the searching in an array program.

Suppose you have a C-input file statement:
i = j + k.

Your intermediate code will be:
t0 = j + k
i = t0
This is ASSIGNMENT-3

Now, the next and last step is, converting this to Assembly code.
The output should be (in NASM syntax):

mov eax, [ j ]
add eax, [ k ]
mov [ t0 ], eax

mov eax, [ t0 ]
mov [ i ], eax

As STEP-0, you need to understand the ASM syntax, which is the purpose
of this lab.
The printf which i have given will be last part of your ASM output...
